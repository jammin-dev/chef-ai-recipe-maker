// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from "./core/CancelablePromise";
import { OpenAPI } from "./core/OpenAPI";
import { request as __request } from "./core/request";
import type {
	LoginLoginAccessTokenData,
	LoginLoginAccessTokenResponse,
	LoginTestTokenResponse,
	LoginRecoverPasswordData,
	LoginRecoverPasswordResponse,
	LoginResetPasswordData,
	LoginResetPasswordResponse,
	LoginRecoverPasswordHtmlContentData,
	LoginRecoverPasswordHtmlContentResponse,
	PrivateCreateUserData,
	PrivateCreateUserResponse,
	RecipesReadRecipesData,
	RecipesReadRecipesResponse,
	RecipesCreateRecipeData,
	RecipesCreateRecipeResponse,
	RecipesReadRecipeData,
	RecipesReadRecipeResponse,
	RecipesUpdateRecipeData,
	RecipesUpdateRecipeResponse,
	RecipesDeleteRecipeData,
	RecipesDeleteRecipeResponse,
	RecipesImproveRecipeData,
	RecipesImproveRecipeResponse,
	RecipesGenerateRecipeData,
	RecipesGenerateRecipeResponse,
	RecipesGenerateRecipePublicData,
	RecipesGenerateRecipePublicResponse,
	UsersReadUsersData,
	UsersReadUsersResponse,
	UsersCreateUserData,
	UsersCreateUserResponse,
	UsersReadUserMeResponse,
	UsersDeleteUserMeResponse,
	UsersUpdateUserMeData,
	UsersUpdateUserMeResponse,
	UsersUpdatePasswordMeData,
	UsersUpdatePasswordMeResponse,
	UsersRegisterUserData,
	UsersRegisterUserResponse,
	UsersReadUserByIdData,
	UsersReadUserByIdResponse,
	UsersUpdateUserData,
	UsersUpdateUserResponse,
	UsersDeleteUserData,
	UsersDeleteUserResponse,
	UtilsTestEmailData,
	UtilsTestEmailResponse,
	UtilsHealthCheckResponse,
} from "./types.gen";

export class LoginService {
	/**
	 * Login Access Token
	 * OAuth2 compatible token login, get an access token for future requests
	 * @param data The data for the request.
	 * @param data.formData
	 * @returns Token Successful Response
	 * @throws ApiError
	 */
	public static loginAccessToken(
		data: LoginLoginAccessTokenData,
	): CancelablePromise<LoginLoginAccessTokenResponse> {
		return __request(OpenAPI, {
			method: "POST",
			url: "/api/v1/login/access-token",
			formData: data.formData,
			mediaType: "application/x-www-form-urlencoded",
			errors: {
				422: "Validation Error",
			},
		});
	}

	/**
	 * Test Token
	 * Test access token
	 * @returns UserPublic Successful Response
	 * @throws ApiError
	 */
	public static testToken(): CancelablePromise<LoginTestTokenResponse> {
		return __request(OpenAPI, {
			method: "POST",
			url: "/api/v1/login/test-token",
		});
	}

	/**
	 * Recover Password
	 * Password Recovery
	 * @param data The data for the request.
	 * @param data.email
	 * @returns Message Successful Response
	 * @throws ApiError
	 */
	public static recoverPassword(
		data: LoginRecoverPasswordData,
	): CancelablePromise<LoginRecoverPasswordResponse> {
		return __request(OpenAPI, {
			method: "POST",
			url: "/api/v1/password-recovery/{email}",
			path: {
				email: data.email,
			},
			errors: {
				422: "Validation Error",
			},
		});
	}

	/**
	 * Reset Password
	 * Reset password
	 * @param data The data for the request.
	 * @param data.requestBody
	 * @returns Message Successful Response
	 * @throws ApiError
	 */
	public static resetPassword(
		data: LoginResetPasswordData,
	): CancelablePromise<LoginResetPasswordResponse> {
		return __request(OpenAPI, {
			method: "POST",
			url: "/api/v1/reset-password/",
			body: data.requestBody,
			mediaType: "application/json",
			errors: {
				422: "Validation Error",
			},
		});
	}

	/**
	 * Recover Password Html Content
	 * HTML Content for Password Recovery
	 * @param data The data for the request.
	 * @param data.email
	 * @returns string Successful Response
	 * @throws ApiError
	 */
	public static recoverPasswordHtmlContent(
		data: LoginRecoverPasswordHtmlContentData,
	): CancelablePromise<LoginRecoverPasswordHtmlContentResponse> {
		return __request(OpenAPI, {
			method: "POST",
			url: "/api/v1/password-recovery-html-content/{email}",
			path: {
				email: data.email,
			},
			errors: {
				422: "Validation Error",
			},
		});
	}
}

export class PrivateService {
	/**
	 * Create User
	 * Create a new user.
	 * @param data The data for the request.
	 * @param data.requestBody
	 * @returns UserPublic Successful Response
	 * @throws ApiError
	 */
	public static createUser(
		data: PrivateCreateUserData,
	): CancelablePromise<PrivateCreateUserResponse> {
		return __request(OpenAPI, {
			method: "POST",
			url: "/api/v1/private/users/",
			body: data.requestBody,
			mediaType: "application/json",
			errors: {
				422: "Validation Error",
			},
		});
	}
}

export class RecipesService {
	/**
	 * Read Recipes
	 * Retrieve recipes.
	 * @param data The data for the request.
	 * @param data.skip
	 * @param data.limit
	 * @returns RecipesPublic Successful Response
	 * @throws ApiError
	 */
	public static readRecipes(
		data: RecipesReadRecipesData = {},
	): CancelablePromise<RecipesReadRecipesResponse> {
		return __request(OpenAPI, {
			method: "GET",
			url: "/api/v1/recipes/",
			query: {
				skip: data.skip,
				limit: data.limit,
			},
			errors: {
				422: "Validation Error",
			},
		});
	}

	/**
	 * Create Recipe
	 * Create new item.
	 * @param data The data for the request.
	 * @param data.requestBody
	 * @returns RecipePublic Successful Response
	 * @throws ApiError
	 */
	public static createRecipe(
		data: RecipesCreateRecipeData,
	): CancelablePromise<RecipesCreateRecipeResponse> {
		return __request(OpenAPI, {
			method: "POST",
			url: "/api/v1/recipes/",
			body: data.requestBody,
			mediaType: "application/json",
			errors: {
				422: "Validation Error",
			},
		});
	}

	/**
	 * Read Recipe
	 * Get recipe by ID.
	 * @param data The data for the request.
	 * @param data.id
	 * @returns RecipePublic Successful Response
	 * @throws ApiError
	 */
	public static readRecipe(
		data: RecipesReadRecipeData,
	): CancelablePromise<RecipesReadRecipeResponse> {
		return __request(OpenAPI, {
			method: "GET",
			url: "/api/v1/recipes/{id}",
			path: {
				id: data.id,
			},
			errors: {
				422: "Validation Error",
			},
		});
	}

	/**
	 * Update Recipe
	 * Update a recipe and its ingredients/directions with transaction safety.
	 * @param data The data for the request.
	 * @param data.id
	 * @param data.requestBody
	 * @returns RecipePublic Successful Response
	 * @throws ApiError
	 */
	public static updateRecipe(
		data: RecipesUpdateRecipeData,
	): CancelablePromise<RecipesUpdateRecipeResponse> {
		return __request(OpenAPI, {
			method: "PUT",
			url: "/api/v1/recipes/{id}",
			path: {
				id: data.id,
			},
			body: data.requestBody,
			mediaType: "application/json",
			errors: {
				422: "Validation Error",
			},
		});
	}

	/**
	 * Delete Recipe
	 * Delete an recipe.
	 * @param data The data for the request.
	 * @param data.id
	 * @returns Message Successful Response
	 * @throws ApiError
	 */
	public static deleteRecipe(
		data: RecipesDeleteRecipeData,
	): CancelablePromise<RecipesDeleteRecipeResponse> {
		return __request(OpenAPI, {
			method: "DELETE",
			url: "/api/v1/recipes/{id}",
			path: {
				id: data.id,
			},
			errors: {
				422: "Validation Error",
			},
		});
	}

	/**
	 * Improve Recipe
	 * Improve (modify) an existing recipe with user instructions and AI assistance.
	 * 1. Fetch the original recipe.
	 * 2. Build a prompt with the original recipe + user instructions.
	 * 3. Send prompt to OpenAI, parse the improved recipe JSON.
	 * 4. Update the recipe in the DB.
	 * 5. Return the updated recipe in the public schema.
	 * @param data The data for the request.
	 * @param data.id
	 * @param data.requestBody
	 * @returns unknown Successful Response
	 * @throws ApiError
	 */
	public static improveRecipe(
		data: RecipesImproveRecipeData,
	): CancelablePromise<RecipesImproveRecipeResponse> {
		return __request(OpenAPI, {
			method: "POST",
			url: "/api/v1/recipes/{id}/improve",
			path: {
				id: data.id,
			},
			body: data.requestBody,
			mediaType: "application/json",
			errors: {
				422: "Validation Error",
			},
		});
	}

	/**
	 * Generate Recipe
	 * @param data The data for the request.
	 * @param data.requestBody
	 * @returns RecipePublic Successful Response
	 * @throws ApiError
	 */
	public static generateRecipe(
		data: RecipesGenerateRecipeData,
	): CancelablePromise<RecipesGenerateRecipeResponse> {
		return __request(OpenAPI, {
			method: "POST",
			url: "/api/v1/recipes/generate",
			body: data.requestBody,
			mediaType: "application/json",
			errors: {
				422: "Validation Error",
			},
		});
	}

	/**
	 * Generate Recipe Public
	 * @param data The data for the request.
	 * @param data.requestBody
	 * @returns RecipePublic Successful Response
	 * @throws ApiError
	 */
	public static generateRecipePublic(
		data: RecipesGenerateRecipePublicData,
	): CancelablePromise<RecipesGenerateRecipePublicResponse> {
		return __request(OpenAPI, {
			method: "POST",
			url: "/api/v1/recipes/generate-public",
			body: data.requestBody,
			mediaType: "application/json",
			errors: {
				422: "Validation Error",
			},
		});
	}
}

export class UsersService {
	/**
	 * Read Users
	 * Retrieve users.
	 * @param data The data for the request.
	 * @param data.skip
	 * @param data.limit
	 * @returns UsersPublic Successful Response
	 * @throws ApiError
	 */
	public static readUsers(
		data: UsersReadUsersData = {},
	): CancelablePromise<UsersReadUsersResponse> {
		return __request(OpenAPI, {
			method: "GET",
			url: "/api/v1/users/",
			query: {
				skip: data.skip,
				limit: data.limit,
			},
			errors: {
				422: "Validation Error",
			},
		});
	}

	/**
	 * Create User
	 * Create new user.
	 * @param data The data for the request.
	 * @param data.requestBody
	 * @returns UserPublic Successful Response
	 * @throws ApiError
	 */
	public static createUser(
		data: UsersCreateUserData,
	): CancelablePromise<UsersCreateUserResponse> {
		return __request(OpenAPI, {
			method: "POST",
			url: "/api/v1/users/",
			body: data.requestBody,
			mediaType: "application/json",
			errors: {
				422: "Validation Error",
			},
		});
	}

	/**
	 * Read User Me
	 * Get current user.
	 * @returns UserPublic Successful Response
	 * @throws ApiError
	 */
	public static readUserMe(): CancelablePromise<UsersReadUserMeResponse> {
		return __request(OpenAPI, {
			method: "GET",
			url: "/api/v1/users/me",
		});
	}

	/**
	 * Delete User Me
	 * Delete own user.
	 * @returns Message Successful Response
	 * @throws ApiError
	 */
	public static deleteUserMe(): CancelablePromise<UsersDeleteUserMeResponse> {
		return __request(OpenAPI, {
			method: "DELETE",
			url: "/api/v1/users/me",
		});
	}

	/**
	 * Update User Me
	 * Update own user.
	 * @param data The data for the request.
	 * @param data.requestBody
	 * @returns UserPublic Successful Response
	 * @throws ApiError
	 */
	public static updateUserMe(
		data: UsersUpdateUserMeData,
	): CancelablePromise<UsersUpdateUserMeResponse> {
		return __request(OpenAPI, {
			method: "PATCH",
			url: "/api/v1/users/me",
			body: data.requestBody,
			mediaType: "application/json",
			errors: {
				422: "Validation Error",
			},
		});
	}

	/**
	 * Update Password Me
	 * Update own password.
	 * @param data The data for the request.
	 * @param data.requestBody
	 * @returns Message Successful Response
	 * @throws ApiError
	 */
	public static updatePasswordMe(
		data: UsersUpdatePasswordMeData,
	): CancelablePromise<UsersUpdatePasswordMeResponse> {
		return __request(OpenAPI, {
			method: "PATCH",
			url: "/api/v1/users/me/password",
			body: data.requestBody,
			mediaType: "application/json",
			errors: {
				422: "Validation Error",
			},
		});
	}

	/**
	 * Register User
	 * Create new user without the need to be logged in.
	 * @param data The data for the request.
	 * @param data.requestBody
	 * @returns UserPublic Successful Response
	 * @throws ApiError
	 */
	public static registerUser(
		data: UsersRegisterUserData,
	): CancelablePromise<UsersRegisterUserResponse> {
		return __request(OpenAPI, {
			method: "POST",
			url: "/api/v1/users/signup",
			body: data.requestBody,
			mediaType: "application/json",
			errors: {
				422: "Validation Error",
			},
		});
	}

	/**
	 * Read User By Id
	 * Get a specific user by id.
	 * @param data The data for the request.
	 * @param data.userId
	 * @returns UserPublic Successful Response
	 * @throws ApiError
	 */
	public static readUserById(
		data: UsersReadUserByIdData,
	): CancelablePromise<UsersReadUserByIdResponse> {
		return __request(OpenAPI, {
			method: "GET",
			url: "/api/v1/users/{user_id}",
			path: {
				user_id: data.userId,
			},
			errors: {
				422: "Validation Error",
			},
		});
	}

	/**
	 * Update User
	 * Update a user.
	 * @param data The data for the request.
	 * @param data.userId
	 * @param data.requestBody
	 * @returns UserPublic Successful Response
	 * @throws ApiError
	 */
	public static updateUser(
		data: UsersUpdateUserData,
	): CancelablePromise<UsersUpdateUserResponse> {
		return __request(OpenAPI, {
			method: "PATCH",
			url: "/api/v1/users/{user_id}",
			path: {
				user_id: data.userId,
			},
			body: data.requestBody,
			mediaType: "application/json",
			errors: {
				422: "Validation Error",
			},
		});
	}

	/**
	 * Delete User
	 * Delete a user.
	 * @param data The data for the request.
	 * @param data.userId
	 * @returns Message Successful Response
	 * @throws ApiError
	 */
	public static deleteUser(
		data: UsersDeleteUserData,
	): CancelablePromise<UsersDeleteUserResponse> {
		return __request(OpenAPI, {
			method: "DELETE",
			url: "/api/v1/users/{user_id}",
			path: {
				user_id: data.userId,
			},
			errors: {
				422: "Validation Error",
			},
		});
	}
}

export class UtilsService {
	/**
	 * Test Email
	 * Test emails.
	 * @param data The data for the request.
	 * @param data.emailTo
	 * @returns Message Successful Response
	 * @throws ApiError
	 */
	public static testEmail(
		data: UtilsTestEmailData,
	): CancelablePromise<UtilsTestEmailResponse> {
		return __request(OpenAPI, {
			method: "POST",
			url: "/api/v1/utils/test-email/",
			query: {
				email_to: data.emailTo,
			},
			errors: {
				422: "Validation Error",
			},
		});
	}

	/**
	 * Health Check
	 * @returns boolean Successful Response
	 * @throws ApiError
	 */
	public static healthCheck(): CancelablePromise<UtilsHealthCheckResponse> {
		return __request(OpenAPI, {
			method: "GET",
			url: "/api/v1/utils/health-check/",
		});
	}
}
